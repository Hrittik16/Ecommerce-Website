# Cursor Rules

## Instructions

- Record fixes for mistakes or corrections to avoid repetition in the `Lessons` section.
- Organize thoughts and plan steps before starting a task in the `Scratchpad` section.
- Clear old tasks if necessary.
- Use todo markers for progress tracking:
  - `[X]` Completed tasks
  - `[ ]` Pending tasks
- Update Scratchpad after completing subtasks.
- Reflect and plan after milestones for better task management.
- Always refer to Scratchpad before planning the next step.

## Lessons


## Scratchpad

### Phase 1: Project Setup and Configuration
[X] Initialize Next.js 15 project with TypeScript
[X] Set up project structure and folder organization
[X] Configure ESLint and Prettier
[X] Set up Shadcn UI components
[ ] Configure Prisma with PostgreSQL
[X] Set up environment variables
[X] Initialize Git repository

### Phase 2: Authentication and User Management
[ ] Implement next-auth@beta setup
[ ] Create user authentication flows (signup, login, forgot password)
[ ] Set up user roles (admin, customer)
[ ] Implement protected routes
[ ] Create user profile management

### Phase 3: Database Schema and Models
[ ] Design and implement database schema
[ ] Create Prisma models for:
  - Users
  - Products
  - Categories
  - Orders
  - Cart
  - Reviews
  - Addresses
  - Payments
[ ] Set up database migrations
[ ] Create seed data for testing

### Phase 4: Admin Dashboard Development
[ ] Create admin layout and navigation
[ ] Implement dashboard overview with Recharts
[ ] Create product management interface
  - CRUD operations
  - Image upload with Uploadthing
  - Category management
[ ] Order management system
[ ] User management interface
[ ] Analytics and reporting
[ ] Inventory management

### Phase 5: Customer-facing Features
[ ] Homepage design and implementation
[ ] Product listing and filtering
[ ] Product detail pages
[ ] Shopping cart functionality
[ ] Checkout process
[ ] Order tracking
[ ] User reviews and ratings
[ ] Search functionality
[ ] Wishlist feature

### Phase 6: Payment Integration
[ ] Set up Stripe integration
[ ] Implement payment processing
[ ] Handle payment webhooks
[ ] Create order confirmation emails with Resend
[ ] Implement refund process

### Phase 7: State Management and API
[ ] Set up Zustand stores for:
  - Cart state
  - User state
  - Product state
  - Order state
[ ] Create API routes with proper validation using Zod
[ ] Implement error handling
[ ] Set up API rate limiting

### Phase 8: UI/UX and Styling
[ ] Implement responsive design
[ ] Create consistent theme using Shadcn
[ ] Add loading states and animations
[ ] Implement error boundaries
[ ] Add toast notifications
[ ] Optimize images and assets

### Phase 9: Testing and Optimization
[ ] Write unit tests
[ ] Implement integration tests
[ ] Performance optimization
  - Image optimization
  - Code splitting
  - Caching strategies
[ ] SEO optimization
[ ] Accessibility improvements

### Phase 10: Deployment and Monitoring
[ ] Set up CI/CD pipeline
[ ] Configure production environment
[ ] Set up monitoring and logging
[ ] Implement backup strategy
[ ] Create deployment documentation

### Phase 11: Additional Features
[ ] Email notifications system
[ ] Social media integration
[ ] Multi-language support
[ ] Dark mode implementation
[ ] Advanced search with filters
[ ] Related products
[ ] Recently viewed products

### Phase 12: Documentation and Maintenance
[ ] Create user documentation
[ ] Write API documentation
[ ] Create maintenance guide
[ ] Set up automated backups
[ ] Plan for future scalability
